---
title: 'Resúmenes estadísticos'
author: 'Mateo Vega'
format:
  html:
    embed-resources: true
---

## Revelar incentidumbre

Si se tiene información acerca de la incertidumbre presente en los datos, es buena idea mostrarla. Hay cuatro familias basicas de geometrias que se pueden usar para este trabajo, dependiendo si los valores de x son discretos o continuos y si se quiere mostrar en medio del intervalo o sólo el rango:

- X discreto, rango: `geom_errorbar()`, `geom_linerange()`.
- X discreto, rango y centro: `geom_crossbar()`, `geom_pointrange()`.
- X continuo, rango: `geom_ribbon()`.
- X continuo, rango y centro: `geom_smooth(stat = 'Identity'`.

Estas geometrias asumen que se está interesado en la distribución de y condicional en x y usan `ymin` y `ymax` para determinar el rango de los valores de y.

```{r}
library(ggplot2)
y  <- c(18, 11, 16)
df <- data.frame(x = 1:3, y = y, se = c(1.2, 0.5, 1.0))

base <- ggplot(df, aes(x, y, ymin= y - se, ymax = y + se))
base + geom_crossbar()
```
```{r}
base + geom_pointrange()
```
```{r}
base + geom_smooth(stat = 'Identity')
```
```{r}
base + geom_errorbar()
```
```{r}
base + geom_linerange()
```
```{r}
base + geom_ribbon()
```
## Datos ponderados

Cuando hay datos agregados donde cada observación represente multiples observaciones, necesitamos tomar en cuenta el peso de la variable

```{r}
# sin ponderar

ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point()
```
```{r}
# Ponderado por población

ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point(aes(size = poptotal / 1e6)) +
  scale_size_area("Population\n(millions)", breaks = c(0.5, 1, 2, 4))
```

Para geometrias más complicadas especificamos el peso con la estetica `weight`, los pesos estan aceptados para los casos que tienen sentido: suavizadores, regresión cuantilicia, boxplots, histogramas, gráficos de densidad. No va a ser visible ni produce una leyenda per si afecta los resultados.

```{r}
# sin peso

ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point() +
  geom_smooth(method = lm, linewidth = 1)
```

```{r}
# con pesos

ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point(aes(size = poptotal / 1e6)) +
  geom_smooth(aes(weight = poptotal / 1e6), method = lm, linewidth = 1) +
  scale_size_area(guide = "none")
```

Al ponderar un histograma o gráfico de densidad por la población total, cambiamos de mostrar la distribución del numero de condados a la distribución del número de personas.

```{r}
ggplot(midwest, aes(percbelowpoverty)) +
  geom_histogram(binwidth = 1) +
  ylab("Condados")
```
```{r}
ggplot(midwest, aes(percbelowpoverty)) +
  geom_histogram(aes(weight = poptotal), binwidth = 1) +
  ylab("Poblacion (1000s)")
```

## Datos de diamantes 

Vamos a usar el conjunto de datos `diamonds` el cual consiste en el precio y calidad para aproximadamente 54000 diamantes

```{r}
diamonds
```

### Mostrando las distribuciones

Hay varias geometrías que se pueden usar para mostrar las distribuciones, dependiendo en la dimensionalidad de la distribución, si es continua o discreta y se está interesado en la distribución condicional o conjunta

Para distribuciones conjuntas de una dimensiona la geometria mas importante es el histograma

```{r}
ggplot(diamonds, aes(depth)) +
  geom_histogram()
```

```{r}
ggplot(diamonds, aes(depth)) +
  geom_histogram(binwidth = 0.1) +
  xlim(55, 70)
```

Para comparar la distribución entre grupos, se tienen algunas opciones:

- Mostrar multiples histogramas `facet_wrap( ~ var)`
- Usar el color y el poligono de frecuencia `geom_freqpoly()`
- Usar un gráfico de densidad condicional `geom_histogram(position = "fill"`

```{r}
ggplot(diamonds, aes(depth)) +
  geom_freqpoly(aes(colour = cut), binwidth = 0.1, na.rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")
```
```{r}
ggplot(diamonds, aes(depth)) +
  geom_histogram(aes(fill = cut), binwidth = 0.1, position = "fill", na.rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")
```

Ambas geometrías usan la transformación `stat = bin`. Esta estadística produce dos variables de resultado: `count` y `density`.. Por defecto count está mapeada a la posición y. La densidad es la cuenta dividida por el total de cuenta multiplicado por el ancho de banda, es útil cuando se quiere comparar la forma de la distribución, no el tamaño.


Otra alternativa es `geom_density()`, coloca una pequeña distribución normal en cada observación y suma las curvas. Usarla cuando sabemos que la densidad es suave, continua y sin limites. Se puede usar `adjust` para ajustar el suavizamiento.

```{r}
ggplot(diamonds, aes(depth)) +
  geom_density(na.rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")
```

```{r}
ggplot(diamonds, aes(depth, fill = cut, colour = cut)) +
  geom_density(alpha = 0.2, na.rm = TRUE) +
  xlim(58, 68) +
  theme(legend.position = "none")
```


Para comparar muchas distribuciones podemos usar estas tres opciones:

- `geom_boxplot()`: se pueden usar para x categórica o continua. Para x continua hay que establecer la estética group para definir como la variable x se separa en bins.

```{r}
ggplot(diamonds, aes(clarity, depth)) +
  geom_boxplot()
```

```{r}
ggplot(diamonds, aes(carat, depth)) + 
  geom_boxplot(aes(group = cut_width(carat, 0.1))) + 
  xlim(NA, 2.05)
```

- `geom_violin()`: Es una versión compacta del gráfico de densidad y se grafica similar al boxplot


```{r}
ggplot(diamonds, aes(clarity, depth)) +
  geom_violin()
```
```{r}
ggplot(diamonds, aes(carat, depth)) +
  geom_violin(aes(group = cut_width(carat, 0.1))) +
  xlim(NA, 2.05)
```

- `geom_dotplot()`: dibuja un punto por cada observación.


### Ejercicios

1. What binwidth tells you the most interesting story about the distribution of carat?

```{r}
ggplot(diamonds, aes(carat)) +
  geom_histogram(binwidth = 0.02) +
  xlim(0, 3.5)
```


2. Draw a histogram of price. What interesting patterns do you see?

```{r}
ggplot(diamonds, aes(price)) +
  geom_histogram()
```

3. How does the distribution of price vary with clarity?

```{r}
ggplot(diamonds, aes(price, fill = clarity)) +
  geom_density(alpha = 0.5)
```

```{r}
ggplot(diamonds, aes(clarity, price)) +
  geom_violin()
```

4. Overlay a frequency polygon and density plot of depth. What computed variable do you need to map to y to make the two plots comparable? (You can either modify geom_freqpoly() or geom_density().)

## Tratando con overplotting

El gráfico de dispersión es importante para ver la relación entre dos variables continuas. Cuando los datos son grandes los puntos van a estar encima de otros, este problema se llama **overplotting**.

La primera forma de tratar con este problema es cambiar las propiedades estéticas, esto sirve para datos pequeños

Una forma es tratar de hacer los puntos más pequeños

```{r}
df <- data.frame(x = rnorm(2000), y = rnorm(2000))
norm <- ggplot(df, aes(x, y)) + xlab(NULL) + ylab(NULL)
norm + geom_point()
```
```{r}
norm + geom_point(shape = 1) # circulos vacios
```

```{r}
norm + geom_point(shape = ".") # tamaño pixel
```

Para datos mas grandes, se puede usar alpha (transparencia) para hcaer los puntos más transparentes

```{r}
norm + geom_point(alpha = 1 / 3)
```

```{r}
norm + geom_point(alpha = 1 / 5)
```
```{r}
norm + geom_point(alpha = 1 / 10)
```

También podemos graficar una densidad en dos dimensiones:

```{r}
norm + geom_bin2d()
```

```{r}
norm + geom_bin2d(bins = 10)
```

```{r}
norm + geom_hex()
```

```{r}
norm + geom_hex(bins = 10)
```

Otra forma de tratar el overplotting es agregar resúmenes para guiar el ojo a la verdadera forma del patrón de los datos.

## Resúmenes estadísticos

Por ejemplo, podemos usar la cuenta o la media

```{r}
ggplot(diamonds, aes(color)) +
  geom_bar()
```

```{r}
ggplot(diamonds, aes(color, price)) + 
  geom_bar(stat = "summary_bin", fun = mean)
```

## Superficies

Ahora consideramos casos donde se requiere una visualización de tres dimensiones, ggplot2 no acepta tres dimensiones pero se pueden graficar en superficies

```{r}
ggplot(faithfuld, aes(eruptions, waiting)) +
  geom_contour(aes(z = density, colour = after_stat(level)))
```


Para hacer un mapa de calor:

```{r}
ggplot(faithfuld, aes(eruptions, waiting)) +
  geom_raster(aes(fill = density))
```

Gráfico de burbujas:

```{r}
small <- faithfuld[seq(1, nrow(faithfuld), by = 10), ] # de burbujas sirve mejor para datos pequeños
ggplot(small, aes(eruptions, waiting)) +
  geom_point(aes(size = density), alpha = 1/3) +
  scale_size_area()
```












































